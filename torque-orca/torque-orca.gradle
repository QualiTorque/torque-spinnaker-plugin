buildscript {
  repositories {
    mavenCentral()
  }
}

apply plugin: "io.spinnaker.plugin.service-extension"
apply plugin: "maven-publish"
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

spinnakerPlugin {
  serviceName = "orca"
  pluginClass = "com.quali.torque.plugins.spinnaker.TorqueSandboxPlugin"
  requires="orca>=0.0.0"
}

dependencies {
  compileOnly "org.pf4j:pf4j:${pf4jVersion}"
  compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  compileOnly "io.spinnaker.kork:kork-plugins-api:${korkVersion}"
  compileOnly "io.spinnaker.kork:kork-artifacts:${korkVersion}"
  compileOnly "io.spinnaker.orca:orca-api:${orcaVersion}"
  implementation 'com.squareup.retrofit2:retrofit:2.7.1'
  implementation 'com.google.code.gson:gson:2.3'
  implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
  implementation 'org.codehaus.groovy:groovy:2.4.12:grooid'
  kapt "org.pf4j:pf4j:${pf4jVersion}"

  testImplementation(platform("io.spinnaker.orca:orca-bom:${orcaVersion}"))
  testImplementation "io.spinnaker.orca:orca-api"
  testImplementation "io.spinnaker.orca:orca-api-tck"
  testImplementation "io.spinnaker.orca:orca-queue"
  testImplementation "io.spinnaker.kork:kork-plugins-tck"

  testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"
  testImplementation "io.strikt:strikt-core:0.31.0"
  testImplementation "dev.minutest:minutest:1.13.0"
  testImplementation "io.mockk:mockk:1.9.3"
  testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1"
  testImplementation "javax.servlet:javax.servlet-api:4.0.1"

  testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.0"
  testRuntime "org.junit.platform:junit-platform-launcher:1.4.0"
  testRuntime "org.junit.platform:junit-platform-commons:1.5.2"
}

tasks.withType(Test) {
  useJUnitPlatform()
}

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
  main {
    output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
  }
}

task generateVersionProperties {
  doLast {
    def propertiesFile = file "$generatedVersionDir/version.properties"
    propertiesFile.parentFile.mkdirs()
    def properties = new Properties()
    properties.setProperty("version", rootProject.version.toString())
    propertiesFile.withWriter { properties.store(it, null) }
  }
}

processResources.dependsOn generateVersionProperties
